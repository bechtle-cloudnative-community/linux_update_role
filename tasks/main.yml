---
# Test if ansible_pkg_mgr is set when not get it's
- name: Ensure ansible_pkg_mgr value is set
  when: ansible_pkg_mgr is undefined
  register: setup_out
  ignore_errors: true
  ansible.builtin.setup:
    filter: 'ansible_pkg_mgr'

# Test if  gather facts failed
- name: Stop running if setup task failed
  when: setup_out is failed
  ansible.builtin.fail:
    msg: "Gather package manager failed or not supported"

# Test if ansible_pkg_mgr is supported by role
- name: Stop running if no Supported package manger is available
  when: ansible_pkg_mgr not in supported_pkg_mgr
  ansible.builtin.fail:
    msg: "{{ ansible_pkg_mgr }} not supported in this role"
    
# tasks file for linux_update_role
- name: Import assert.yml
  ansible.builtin.import_tasks: assert.yml
  run_once: yes
  delegate_to: localhost

#Rund Task for the package manager
- name: Run Update/Upgrade for {{ ansible_pkg_mgr }}
  ansible.builtin.include_tasks:
    file: "{{ ansible_pkg_mgr }}.yml"


- name: Tasks to reboot if needed
  when: system_need_reboot and do_reboot
  block:
# Check if file exist
    - name: If required Reboot {{ inventory_hostname }}
      ansible.builtin.reboot:
        msg: "Reboot {{ inventory_hostname }}"
        connect_timeout: 60

    - name: Debug System is back
      ansible.builtin.debug:
        msg: "System {{ inventory_hostname }} is Rebooted"
  rescue:
    - name: "Message if Reboot Failed"
      ansible.builtin.fail:
        "{{ inventory_hostname }} is failed on reboot"
